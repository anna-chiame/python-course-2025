"""
PHONEBOOK APPLICATION
=====================
Main control file that connects all modules together.

Functionality:
    - Displays a colorful animated welcome screen.
    - Loads or creates a JSON database.
    - Runs an interactive menu for user actions.
    - Calls modules for Add, Find, Delete, Update, List.
    - Displays a animated  goodbye screen on exit.
"""

import sys
from colorama import Fore, Style, init
from time import sleep
import random

# —ñ–º–ø–æ—Ä—Ç –≤–ª–∞—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from storage_module import ensure_database, load_data_basa, save_data_basa
from user_input import get_user_action
from add_module import add_contact
from find_module import find_contact
from delete_module import delete_contact
from edit_module import edit_contact
from list_module import list_contacts

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
init(autoreset=True)

#  –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
def print_separator():
    """Prints a colored line separator for visual clarity."""
    print(Fore.BLUE + Style.BRIGHT + "‚îÄ" * 60)

def animated_print(text: str, delay: float = 0.03, color: str = Fore.WHITE):
    """
    Prints text gradually (typewriter effect üñãÔ∏è).

    Args:
        text (str): Text to display.
        delay (float): Time delay between characters.
        color (str): Text color (Fore.CYAN, Fore.YELLOW, etc.)
    """
    for char in text:
        sys.stdout.write(color + char)
        sys.stdout.flush()
        sleep(delay)
    print()

# –ï–∫—Ä–∞–Ω –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
def print_welcome():
    """
    Displays a cheerful welcome screen at program start.
    Uses colors, emojis, and animation to greet the user.
    """

    print_separator()
    animated_print("üíñ  WELCOME TO YOUR AMAZING PHONEBOOK  üíñ", color=Fore.MAGENTA, delay=0.04)
    sleep(0.5)
    animated_print("‚ú® Organize your chaos ‚ú®", color=Fore.CYAN, delay=0.03)
    sleep(0.5)

    print(Fore.YELLOW + "=" * 60)
    sleep(0.3)

    animated_print("üìû  1) Add   üîç  2) Find   ‚ùå  3) Delete", color=Fore.GREEN, delay=0.02)
    sleep(0.3)
    animated_print("‚úèÔ∏è   4) Update   üìã  5) List   üö™  6) Exit", color=Fore.MAGENTA, delay=0.02)
    sleep(0.3)

    print(Fore.YELLOW + "=" * 60)

# –ü—Ä–æ—â–∞–Ω–Ω—è
def print_goodbye():
    """
    Displays a colorful and animated goodbye message on exit.
    Confirms data saving, leaves a friendly farewell,
    and shows a random inspirational quote in English.

    The quote is chosen randomly from a predefined list.
    """

    # —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ª–∞—Ç–∏—Ö —Ñ—Ä–∞–∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
    quotes = [
        "Keep smiling ‚Äî it confuses people. üòÑ",
        "Dream big, work hard, stay humble. üí™",
        "‚òïCode, coffee, repeat. üíª",
        "Be the reason someone smiles today. üåû",
        "Every ending is a new beginning. üå±",
        "Stay curious and keep learning! üß†",
        "Make today so awesome that yesterday gets jealous. üòé",
        "Life is short ‚Äî call your friends often. üìû",
        "You did great today. Now go rest. üåô",
        "Believe in yourself ‚Äî you‚Äôre the magic. ‚ú®"
    ]

    # –≤–∏–±—ñ—Ä –æ–¥–Ω—ñ—î—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ü–∏—Ç–∞—Ç–∏
    random_quote = random.choice(quotes)

    # –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    print_separator()
    animated_print("üíæ Saving your changes...", color=Fore.YELLOW, delay=0.04)
    sleep(0.7)
    animated_print("‚úÖ All contacts saved successfully!", color=Fore.GREEN, delay=0.04)
    sleep(0.6)

    # –≤–∏–≤–æ–¥–∏–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ü–∏—Ç–∞—Ç—É –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ—â–∞–Ω–Ω—è
    print_separator()
    print(Fore.CYAN + Style.BRIGHT + f"üí° Quote of the day: {random_quote}")
    print_separator()

#  –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏

DEFAULT_DATABASE_NAME = 'contacts.json'  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö

def main():
    """
    Main control loop of the phonebook program.

    Steps:
        1. Checks if the database exists (creates one if missing)
        2. Loads all data into memory
        3. Displays a colorful welcome screen
        4. Runs an infinite loop with user menu actions
        5. On exit, saves updated data and displays a goodbye screen
    """

    # –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –±–∞–∑–∏ (—á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
    if len(sys.argv) > 1:
        data_basa_name = sys.argv[1]
    else:
        data_basa_name = DEFAULT_DATABASE_NAME

    ensure_database(data_basa_name)
    data_basa = load_data_basa(data_basa_name)

    # –≤—ñ—Ç–∞–ª—å–Ω–∏–π –µ–∫—Ä–∞–Ω
    print_welcome()

    # –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
    while True:
        print_separator()
        choice = get_user_action()
        print_separator()

        if choice == "1":
            print(Fore.CYAN + "üì• ADD NEW CONTACT")
            add_contact(data_basa)

        elif choice == "2":
            print(Fore.YELLOW + "üîé SEARCH CONTACTS")
            find_contact(data_basa)

        elif choice == "3":
            print(Fore.RED + "‚ùå DELETE CONTACT")
            delete_contact(data_basa)

        elif choice == "4":
            print(Fore.MAGENTA + "‚úèÔ∏è UPDATE CONTACT")
            edit_contact(data_basa)

        elif choice == "5":
            print(Fore.GREEN + "üìã LIST OF CONTACTS")
            list_contacts(data_basa)

        elif choice == "6":
            save_data_basa(data_basa, data_basa_name)
            print_goodbye()
            break

        else:
            print(Fore.RED + "Invalid choice, please try again.")


#  –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(Fore.RED + "\nProgram interrupted. Goodbye!")
